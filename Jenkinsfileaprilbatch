def sendSlackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel:'walmart')
}

node('nodes'){

def mavenHome = tool name: "maven3.8.4"
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])

echo "Job name is : ${env.JOB_NAME}"
echo "Node name is : ${env.NODE_NAME}"
echo "Build number is : ${env.BUILD_NUMBER}"

try{
sendSlackNotifications('STARTED')
stage('Checkoutcode')
{
git branch: 'development', credentialsId: 'eb8b0398-47e4-4656-a3f8-ec9b0d7b22d4', url: 'https://github.com/sai-mithunfork/maven-web-application.git'
}
stage('Build')
{
sh "${mavenHome}/bin/mvn clean package"
//if you installed mvn in window then we need to use "bat" in the place of sh 
}
/*
stage('TriggerDownstreamJob')
{
build job:'pipelinesscriptwithbuildparameters'
}
stage('ExecuteSonarQubeReport')
{
sh "${mavenHome}/bin/mvn sonar:sonar"
}
stage('UploadArtifactsIntoNexus')
{
sh "${mavenHome}/bin/mvn deploy"
}
stage('DeployAppIntoTomcatServer')
{
sshagent(['13ef7370-c8e3-4b2f-9bde-10154062d7ab']) {
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.38.59:/opt/apache-tomcat-9.0.63/webapps"
}
} 
*/
}catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    sendSlackNotifications(currentBuild.result)
  }

}

